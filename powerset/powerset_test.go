package powerset

import (
	"testing"

	"cribbage/card"

	"github.com/stretchr/testify/assert"
)

func TestPowerSet(t *testing.T) {
	testCases := []struct {
		description string
		input       card.Cards
		output      []card.Cards
	}{
		{
			description: "empty",
			input:       card.Cards{},
			output: []card.Cards{
				{},
			},
		},
		{
			description: "one element",
			input: card.Cards{
				{
					card.Spades,
					1,
				},
			},
			output: []card.Cards{
				{},
				{
					{
						card.Spades,
						1,
					},
				},
			},
		},
		{
			description: "two elements",
			input: card.Cards{
				{
					card.Spades,
					1,
				},
				{
					card.Spades,
					2,
				},
			},
			output: []card.Cards{
				{},
				{
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
			},
		},
		{
			description: "three elements",
			input: card.Cards{
				{
					card.Spades,
					1,
				},
				{
					card.Spades,
					2,
				},
				{
					card.Spades,
					3,
				},
			},
			output: []card.Cards{
				{},
				{
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						3,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
			},
		},
		{
			description: "four elements",
			input: card.Cards{
				{
					card.Spades,
					1,
				},
				{
					card.Spades,
					2,
				},
				{
					card.Spades,
					3,
				},
				{
					card.Spades,
					4,
				},
			},
			output: []card.Cards{
				{},
				{
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						3,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						4,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						3,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						1,
					},
				},
				{
					{
						card.Spades,
						4,
					},
					{
						card.Spades,
						3,
					},
					{
						card.Spades,
						2,
					},
					{
						card.Spades,
						1,
					},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(testCase.description, func(t *testing.T) {
			assert.ElementsMatch(t, testCase.output, Get(testCase.input))
		})
	}
}
